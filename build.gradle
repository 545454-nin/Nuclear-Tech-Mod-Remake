buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'kotlin'
// apply plugin: 'eclipse'

version = "$minecraft_version-$mod_version" as Object
group = 'at.martinthedragon'
archivesBaseName = "$modid"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: "$minecraft_version"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // "SCAN": For mods scan.
    // "REGISTRIES": For firing of registry events.
    // "REGISTRYDUMP": For getting the contents of all registries.
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'

            mods {
                nucleartech {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'

            mods {
                nucleartech {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', "$modid", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                nucleartech {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    library // workaround for IDE runtime
    implementation.extendsFrom library
}

minecraft.runs.all {
    lazyToken("minecraft_classpath") {
        configurations.library.copyRecursive().resolve()
            .collect { it.absolutePath }
            .findAll { !it.contains("org.jetbrains\\annotations\\13.0") } // somewhat inelegantly remove duplicate
            .join(File.pathSeparator)
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:$minecraft_version-$forge_version"
    library "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
//    compileOnly fg.deobf("mezz.jei:jei-$minecraft_version:$jei_version:api")
//    runtimeOnly fg.deobf("mezz.jei:jei-$minecraft_version:$jei_version")
}

jar {
    dependsOn(classes)
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    //noinspection GroovyAssignabilityCheck
    manifest {
        attributes([
            "Specification-Title": "Nuclear Tech Mod",
            "Specification-Vendor": "MartinTheDragon",
            "Specification-Version": "$mod_version",
            "Implementation-Title": project.name,
            "Implementation-Version": "${project.version}",
            "Implementation-Vendor" :"MartinTheDragon",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    configurations {
        shaded.extendsFrom library
    }
    from {
        configurations.shaded.collect() { it.isDirectory() ? it : zipTree(it) }
    }
}

jar.finalizedBy('reobfJar')

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven { url 'https://modmaven.dev/' }
    mavenCentral()
}

def kotlinCompilerArgs = ["-Xopt-in=kotlin.RequiresOptIn", "-Xjvm-default=all"]

compileKotlin {
    kotlinOptions {
        jvmTarget = "17"
        freeCompilerArgs += kotlinCompilerArgs
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "17"
        freeCompilerArgs += kotlinCompilerArgs
    }
}
