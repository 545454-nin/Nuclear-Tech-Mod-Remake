package at.martinthedragon.ntm

import at.martinthedragon.ntm.RegistriesAndLifecycle.register
import at.martinthedragon.ntm.items.AutoTooltippedItem
import at.martinthedragon.ntm.items.EffectItem
import at.martinthedragon.ntm.items.SirenTrack
import at.martinthedragon.ntm.items.autoTooltip
import net.minecraft.client.util.ITooltipFlag
import net.minecraft.item.Food
import net.minecraft.item.Item
import net.minecraft.item.ItemStack
import net.minecraft.item.Rarity
import net.minecraft.util.text.*
import net.minecraft.world.World
import net.minecraftforge.fml.common.thread.SidedThreadGroups

@Suppress("unused")
object ModItems {
    val uraniumIngot: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), .5f).setRegistryName("uranium_ingot").register()
    val u233Ingot: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 5f).setRegistryName("u233_ingot").register()
    val u235Ingot: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 5f).setRegistryName("u235_ingot").register()
    val u238Ingot: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), .5f).setRegistryName("u238_ingot").register()
    val th232Ingot: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("th232_ingot").register()
    val plutoniumIngot: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 2.5f).setRegistryName("plutonium_ingot").register()
    val pu238Ingot: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 2.5f).setRegistryName("pu238_ingot").register()
    val pu239Ingot: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 5f).setRegistryName("pu239_ingot").register()
    val pu240Ingot: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 5f).setRegistryName("pu240_ingot").register()
    val neptuniumIngot: Item = object : EffectItem(listOf(EffectTypes.Radioactive), Properties().tab(CT.Parts.itemGroup), 2.5f) {
        override fun appendHoverText(stack: ItemStack, worldIn: World?, tooltip: MutableList<ITextComponent>, flagIn: ITooltipFlag) {
            autoTooltip(stack, worldIn, tooltip, flagIn)
            super.appendHoverText(stack, worldIn, tooltip, flagIn)
        }
    }.setRegistryName("neptunium_ingot").register()
    val poloniumIngot: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 10f).setRegistryName("polonium_ingot").register()
    val titaniumIngot: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("titanium_ingot").register()
    val copperIngot: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("copper_ingot").register()
    val redCopperIngot: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("red_copper_ingot").register()
    val advancedAlloyIngot: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("advanced_alloy_ingot").register()
    val tungstenIngot: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("tungsten_ingot").register()
    val aluminiumIngot: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("aluminium_ingot").register()
    val steelIngot: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("steel_ingot").register()
    val leadIngot: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("lead_ingot").register()
    val berylliumIngot: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("beryllium_ingot").register()
    val cobaltIngot: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("cobalt_ingot").register()
    val highSpeedSteelIngot: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("high_speed_steel_ingot").register()
    val polymerIngot: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("polymer_ingot").register()
    val schraraniumIngot: Item = object : EffectItem(listOf(EffectTypes.Radioactive, EffectTypes.Blinding), Properties().tab(CT.Parts.itemGroup), 2.5f) {
        override fun appendHoverText(stack: ItemStack, worldIn: World?, tooltip: MutableList<ITextComponent>, flagIn: ITooltipFlag) {
            autoTooltip(stack, worldIn, tooltip, flagIn)
            super.appendHoverText(stack, worldIn, tooltip, flagIn)
        }
    }.setRegistryName("schraranium_ingot").register()
    val schrabidiumIngot: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive, EffectItem.EffectTypes.Blinding), Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.RARE), 7.5f).setRegistryName("schrabidium_ingot").register()
    val magnetizedTungstenIngot: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("magnetized_tungsten_ingot").register()
    val combineSteelIngot: Item = AutoTooltippedItem(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("combine_steel_ingot").register()
    val soliniumIngot: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive, EffectItem.EffectTypes.Blinding), Item.Properties().tab(CT.Parts.itemGroup), 7.5f).setRegistryName("solinium_ingot").register()
    val uraniumFuelIngot: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 3.5f).setRegistryName("uranium_fuel_ingot").register()
    val thoriumFuelIngot: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), .5f).setRegistryName("thorium_fuel_ingot").register()
    val plutoniumFuelIngot: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 3.5f).setRegistryName("plutonium_fuel_ingot").register()
    val moxFuelIngot: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 3.5f).setRegistryName("mox_fuel_ingot").register()
    val schrabidiumFuelIngot: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 5f).setRegistryName("schrabidium_fuel_ingot").register()
    val highEnrichedSchrabidiumFuelIngot: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive, EffectItem.EffectTypes.Blinding), Item.Properties().tab(CT.Parts.itemGroup), 7.5f).setRegistryName("high_enriched_schrabidium_fuel_ingot").register()
    val lowEnrichedSchrabidiumFuelIngot: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive, EffectItem.EffectTypes.Blinding), Item.Properties().tab(CT.Parts.itemGroup), 2.5f).setRegistryName("low_enriched_schrabidium_fuel_ingot").register()
    val australiumIngot: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.UNCOMMON)).setRegistryName("australium_ingot").register()
    val weidaniumIngot: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.UNCOMMON)).setRegistryName("weidanium_ingot").register()
    val reiiumIngot: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.UNCOMMON)).setRegistryName("reiium_ingot").register()
    val unobtainiumIngot: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.UNCOMMON)).setRegistryName("unobtainium_ingot").register()
    val daffergonIngot: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.UNCOMMON)).setRegistryName("daffergon_ingot").register()
    val verticiumIngot: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.UNCOMMON)).setRegistryName("verticium_ingot").register()
    val lanthanumIngot: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("lanthanum_ingot").register()
    val actiniumIngot: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("actinium_ingot").register()
    val deshIngot: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("desh_ingot").register()
    val starmetalIngot: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("starmetal_ingot").register()
    val saturniteIngot: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.RARE)).setRegistryName("saturnite_ingot").register()
    val euphemiumIngot: Item = AutoTooltippedItem(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.EPIC)).setRegistryName("euphemium_ingot").register()
    val dineutroniumIngot: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("dineutronium_ingot").register()
    val electroniumIngot: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("electronium_ingot").register()
    val whitePhosphorusIngot: Item = EffectItem(listOf(EffectItem.EffectTypes.Hot), Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("white_phosphorus_ingot").register()
    val semtexBar: Item = AutoTooltippedItem(Item.Properties().tab(CT.Parts.itemGroup).food(Food.Builder().nutrition(4).saturationMod(0.5f).build())).setRegistryName("semtex_bar").register()
    val lithiumCube: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("lithium_cube").register()
    val solidFuelCube: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("solid_fuel_cube").register()
    val solidRocketFuelCube: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("solid_rocket_fuel_cube").register()
    val fiberglassSheet: Item = AutoTooltippedItem(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("fiberglass_sheet").register()
    val asbestosSheet: Item = AutoTooltippedItem(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("asbestos_sheet").register()
    val mercuryDroplet: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("mercury_droplet").register()
    val mercuryBottle: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("mercury_bottle").register()
    val coke: Item = object : Item(Properties().tab(CT.Parts.itemGroup)) {
        override fun getBurnTime(itemStack: ItemStack?) = 3200
    }.setRegistryName("coke").register()
    val lignite: Item = object : Item(Properties().tab(CT.Parts.itemGroup)) {
        override fun getBurnTime(itemStack: ItemStack?) = 1200
    }.setRegistryName("lignite").register()
    val ligniteBriquette: Item = object : Item(Properties().tab(CT.Parts.itemGroup)) {
        override fun getBurnTime(itemStack: ItemStack?) = 1600
    }.setRegistryName("lignite_briquette").register()
    val sulfur: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("sulfur").register()
    val niter: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("niter").register()
    val fluorite: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("fluorite").register()
    val coalPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("coal_powder").register()
    val ironPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("iron_powder").register()
    val goldPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("gold_powder").register()
    val lapisLazuliPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("lapis_lazuli_powder").register()
    val quartzPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("quartz_powder").register()
    val diamondPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("diamond_powder").register()
    val emeraldPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("emerald_powder").register()
    val uraniumPowder: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive, EffectItem.EffectTypes.Hot), Item.Properties().tab(CT.Parts.itemGroup), .5f).setRegistryName("uranium_powder").register()
    val thoriumPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.EPIC)).setRegistryName("thorium_powder").register()
    val plutoniumPowder: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive, EffectItem.EffectTypes.Hot), Item.Properties().tab(CT.Parts.itemGroup), 2.5f).setRegistryName("plutonium_powder").register()
    val neptuniumPowder: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive, EffectItem.EffectTypes.Hot), Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.EPIC), 2.5f).setRegistryName("neptunium_powder").register()
    val poloniumPowder: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive, EffectItem.EffectTypes.Hot), Item.Properties().tab(CT.Parts.itemGroup), 10f).setRegistryName("polonium_powder").register()
    val titaniumPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("titanium_powder").register()
    val copperPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("copper_powder").register()
    val redCopperPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("red_copper_powder").register()
    val advancedAlloyPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("advanced_alloy_powder").register()
    val tungstenPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("tungsten_powder").register()
    val aluminiumPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("aluminium_powder").register()
    val steelPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("steel_powder").register()
    val leadPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("lead_powder").register()
    val yellowcake: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), .5f).setRegistryName("yellowcake").register()
    val berylliumPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("beryllium_powder").register()
    val highSpeedSteelPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("high_speed_steel_powder").register()
    val polymerPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("polymer_powder").register()
    val schrabidiumPowder: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive, EffectItem.EffectTypes.Blinding, EffectItem.EffectTypes.Hot), Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.RARE), 7.5f).setRegistryName("schrabidium_powder").register()
    val magnetizedTungstenPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("magnetized_tungsten_powder").register()
    val chlorophytePowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("chlorophyte_powder").register()
    val combineSteelPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("combine_steel_powder").register()
    val lithiumPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("lithium_powder").register()
    val lignitePowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("lignite_powder").register()
    val neodymiumPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.EPIC)).setRegistryName("neodymium_powder").register()
    val australiumPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.UNCOMMON)).setRegistryName("australium_powder").register()
    val weidaniumPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.UNCOMMON)).setRegistryName("weidanium_powder").register()
    val reiiumPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.UNCOMMON)).setRegistryName("reiium_powder").register()
    val unobtainiumPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.UNCOMMON)).setRegistryName("unobtainium_powder").register()
    val daffergonPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.UNCOMMON)).setRegistryName("daffergon_powder").register()
    val verticiumPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.UNCOMMON)).setRegistryName("verticium_powder").register()
    val cobaltPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.EPIC)).setRegistryName("cobalt_powder").register()
    val niobiumPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.EPIC)).setRegistryName("niobium_powder").register()
    val ceriumPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.EPIC)).setRegistryName("cerium_powder").register()
    val lanthanumPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("lanthanum_powder").register()
    val actiniumPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("actinium_powder").register()
    val asbestosPowder: Item = AutoTooltippedItem(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("asbestos_powder").register()
    val enchantmentPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("enchantment_powder").register()
    val cloudResidue: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("cloud_residue").register()
    val thermonuclearAshes: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive, EffectItem.EffectTypes.Hot), Item.Properties().tab(CT.Parts.itemGroup), 500f).setRegistryName("thermonuclear_ashes").register()
    val semtexMix: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("semtex_mix").register()
    val deshMix: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("desh_mix").register()
    val deshReadyMix: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("desh_ready_mix").register()
    val deshPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("desh_powder").register()
    val nitaniumMix: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("nitanium_mix").register()
    val sparkMix: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("spark_mix").register()
    val meteoritePowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("meteorite_powder").register()
    val euphemiumPowder: Item = AutoTooltippedItem(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.EPIC)).setRegistryName("euphemium_powder").register()
    val dineutroniumPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("dineutronium_powder").register()
    val desaturatedRedstone: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("desaturated_redstone").register()
    val dust: Item = AutoTooltippedItem(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("dust").register()
    val tinyLithiumPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("tiny_lithium_powder").register()
    val tinyNeodymiumPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("tiny_neodymium_powder").register()
    val tinyCobaltPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("tiny_cobalt_powder").register()
    val tinyNiobiumPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("tiny_niobium_powder").register()
    val tinyCeriumPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("tiny_cerium_powder").register()
    val tinyLanthanumPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("tiny_lanthanum_powder").register()
    val tinyActiniumPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("tiny_actinium_powder").register()
    val tinyMeteoritePowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("tiny_meteorite_powder").register()
    val redPhosphorus: Item = AutoTooltippedItem(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("red_phosphorus").register()
    val cryoPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("cryo_powder").register()
    val poisonPowder: Item = AutoTooltippedItem(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("poison_powder").register()
    val thermite: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("thermite").register()
    val energyPowder: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.UNCOMMON)).setRegistryName("energy_powder").register()
    val cordite: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("cordite").register()
    val ballistite: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("ballistite").register()
    val ironCrystals: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("iron_crystals").register()
    val goldCrystals: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("gold_crystals").register()
    val redstoneCrystals: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("redstone_crystals").register()
    val diamondCrystals: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("diamond_crystals").register()
    val uraniumCrystals: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), .75f).setRegistryName("uranium_crystals").register()
    val thoriumCrystals: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("thorium_crystals").register()
    val plutoniumCrystals: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 3f).setRegistryName("plutonium_crystals").register()
    val titaniumCrystals: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("titanium_crystals").register()
    val sulfurCrystals: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("sulfur_crystals").register()
    val niterCrystals: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("niter_crystals").register()
    val copperCrystals: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("copper_crystals").register()
    val tungstenCrystals: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("tungsten_crystals").register()
    val aluminiumCrystals: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("aluminium_crystals").register()
    val fluoriteCrystals: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("fluorite_crystals").register()
    val berylliumCrystals: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("beryllium_crystals").register()
    val leadCrystals: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("lead_crystals").register()
    val schraraniumCrystals: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive, EffectItem.EffectTypes.Blinding), Item.Properties().tab(CT.Parts.itemGroup), 5f).setRegistryName("schraranium_crystals").register()
    val schrabidiumCrystals: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive, EffectItem.EffectTypes.Blinding), Item.Properties().tab(CT.Parts.itemGroup), 10f).setRegistryName("schrabidium_crystals").register()
    val rareEarthCrystals: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("rare_earth_crystals").register()
    val redPhosphorusCrystals: Item = EffectItem(listOf(EffectItem.EffectTypes.Hot), Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("red_phosphorus_crystals").register()
    val lithiumCrystals: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("lithium_crystals").register()
    val starmetalCrystals: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("starmetal_crystals").register()
    val trixiteCrystals: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 10f).setRegistryName("trixite_crystals").register()
    val neodymiumFragment: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("neodymium_fragment").register()
    val cobaltFragment: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("cobalt_fragment").register()
    val niobiumFragment: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("niobium_fragment").register()
    val ceriumFragment: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("cerium_fragment").register()
    val lanthanumFragment: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("lanthanum_fragment").register()
    val actiniumFragment: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("actinium_fragment").register()
    val meteoriteFragment: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("meteorite_fragment").register()
    val biomass: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("biomass").register()
    val compressedBiomass: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("compressed_biomass").register()
    val uraniumNugget: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), .25f).setRegistryName("uranium_nugget").register()
    val u233Nugget: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 1.5f).setRegistryName("u233_nugget").register()
    val u235Nugget: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 1.5f).setRegistryName("u235_nugget").register()
    val u238Nugget: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), .25f).setRegistryName("u238_nugget").register()
    val th232Nugget: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("th232_nugget").register()
    val plutoniumNugget: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 1.5f).setRegistryName("plutonium_nugget").register()
    val pu238Nugget: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), .25f).setRegistryName("pu238_nugget").register()
    val pu239Nugget: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 1.5f).setRegistryName("pu239_nugget").register()
    val pu240Nugget: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 1.5f).setRegistryName("pu240_nugget").register()
    val neptuniumNugget: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 1.5f).setRegistryName("neptunium_nugget").register()
    val poloniumNugget: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 3.5f).setRegistryName("polonium_nugget").register()
    val leadNugget: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("lead_nugget").register()
    val berylliumNugget: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("beryllium_nugget").register()
    val schrabidiumNugget: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive, EffectItem.EffectTypes.Blinding), Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.RARE), 2.5f).setRegistryName("schrabidium_nugget").register()
    val soliniumNugget: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive, EffectItem.EffectTypes.Blinding), Item.Properties().tab(CT.Parts.itemGroup), 2.5f).setRegistryName("solinium_nugget").register()
    val uraniumFuelNugget: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 1.5f).setRegistryName("uranium_fuel_nugget").register()
    val thoriumFuelNugget: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), .025f).setRegistryName("thorium_fuel_nugget").register()
    val plutoniumFuelNugget: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 1f).setRegistryName("plutonium_fuel_nugget").register()
    val moxFuelNugget: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 1f).setRegistryName("mox_fuel_nugget").register()
    val schrabidiumFuelNugget: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 1.5f).setRegistryName("schrabidium_fuel_nugget").register()
    val highEnrichedSchrabidiumFuelNugget: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive, EffectItem.EffectTypes.Blinding), Item.Properties().tab(CT.Parts.itemGroup), 2.5f).setRegistryName("high_enriched_schrabidium_fuel_nugget").register()
    val lowEnrichedSchrabidiumFuelNugget: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive, EffectItem.EffectTypes.Blinding), Item.Properties().tab(CT.Parts.itemGroup), .5f).setRegistryName("low_enriched_schrabidium_fuel_nugget").register()
    val australiumNugget: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.UNCOMMON)).setRegistryName("australium_nugget").register()
    val weidaniumNugget: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.UNCOMMON)).setRegistryName("weidanium_nugget").register()
    val reiiumNugget: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.UNCOMMON)).setRegistryName("reiium_nugget").register()
    val unobtainiumNugget: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.UNCOMMON)).setRegistryName("unobtainium_nugget").register()
    val daffergonNugget: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.UNCOMMON)).setRegistryName("daffergon_nugget").register()
    val verticiumNugget: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.UNCOMMON)).setRegistryName("verticium_nugget").register()
    val deshNugget: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("desh_nugget").register()
    val euphemiumNugget: Item = AutoTooltippedItem(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.EPIC)).setRegistryName("euphemium_nugget").register()
    val dineutroniumNugget: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("dineutronium_nugget").register()
    val ironPlate: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("iron_plate").register()
    val goldPlate: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("gold_plate").register()
    val titaniumPlate: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("titanium_plate").register()
    val aluminiumPlate: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("aluminium_plate").register()
    val steelPlate: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("steel_plate").register()
    val leadPlate: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("lead_plate").register()
    val copperPlate: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("copper_plate").register()
    val advancedAlloyPlate: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("advanced_alloy_plate").register()
    val neutronReflector: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("neutron_reflector").register()
    val schrabidiumPlate: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive, EffectItem.EffectTypes.Blinding), Item.Properties().tab(CT.Parts.itemGroup), 7.5f).setRegistryName("schrabidium_plate").register()
    val combineSteelPlate: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("combine_steel_plate").register()
    val mixedPlate: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("mixed_plate").register()
    val saturnitePlate: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("saturnite_plate").register()
    val paAAlloyPlate: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("paa_alloy_plate").register()
    val insulator: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("insulator").register()
    val kevlarCeramicCompound: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("kevlar_ceramic_compound").register()
    val dalekaniumPlate: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("angry_metal").register()
    val deshCompoundPlate: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("desh_compound_plate").register()
    val euphemiumCompoundPlate: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("euphemium_compound_plate").register()
    val dineutroniumCompoundPlate: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("dineutronium_compound_plate").register()
    val copperPanel: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("copper_panel").register()
    val highSpeedSteelBolt: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("high_speed_steel_bolt").register()
    val tungstenBolt: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("tungsten_bolt").register()
    val reinforcedTurbineShaft: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("reinforced_turbine_shaft").register()
    val hazmatCloth: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("hazmat_cloth").register()
    val advancedHazmatCloth: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("advanced_hazmat_cloth").register()
    val leadReinforcedHazmatCloth: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("lead_reinforced_hazmat_cloth").register()
    val fireProximityCloth: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("fire_proximity_cloth").register()
    val activatedCarbonFilter: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("activated_carbon_filter").register()
    val aluminiumWire: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("aluminium_wire").register()
    val copperWire: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("copper_wire").register()
    val tungstenWire: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("tungsten_wire").register()
    val redCopperWire: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("red_copper_wire").register()
    val superConductor: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("super_conductor").register()
    val goldWire: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("gold_wire").register()
    val schrabidiumWire: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive, EffectItem.EffectTypes.Blinding), Item.Properties().tab(CT.Parts.itemGroup), .5f).setRegistryName("schrabidium_wire").register()
    val highTemperatureSuperConductor: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("high_temperature_super_conductor").register()
    val copperCoil: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("copper_coil").register()
    val ringCoil: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("ring_coil").register()
    val superConductingCoil: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("super_conducting_coil").register()
    val superConductingRingCoil: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("super_conducting_ring_coil").register()
    val goldCoil: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("gold_coil").register()
    val goldRingCoil: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("gold_ring_coil").register()
    val heatingCoil: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("heating_coil").register()
    val highTemperatureSuperConductingCoil: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("high_temperature_super_conducting_coil").register()
    val steelTank: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("steel_tank").register()
    val motor: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("motor").register()
    val centrifugeElement: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("centrifuge_element").register()
    val centrifugeTower: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("centrifuge_tower").register()
    val deeMagnets: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("dee_magnets").register()
    val flatMagnet: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("flat_magnet").register()
    val cyclotronTower: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("cyclotron_tower").register()
    val breedingReactorCore: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("breeding_reactor_core").register()
    val rtgUnit: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("rtg_unit").register()
    val thermalDistributionUnit: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("thermal_distribution_unit").register()
    val endothermicDistributionUnit: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("endothermic_distribution_unit").register()
    val exothermicDistributionUnit: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("exothermic_distribution_unit").register()
    val gravityManipulator: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("gravity_manipulator").register()
    val steelPipes: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("steel_pipes").register()
    val titaniumDrill: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("titanium_drill").register()
    val photovoltaicPanel: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("photovoltaic_panel").register()
    val chlorinePinwheel: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("chlorine_pinwheel").register()
    val telepad: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("telepad").register()
    val entanglementKit: Item = AutoTooltippedItem(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("entanglement_kit").register()
    val stabilizerComponent: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("stabilizer_component").register()
    val emitterComponent: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("emitter_component").register()
    val aluminiumCap: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("aluminium_cap").register()
    val smallSteelShell: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("small_steel_shell").register()
    val smallAluminiumShell: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("small_aluminium_shell").register()
    val bigSteelShell: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("big_steel_shell").register()
    val bigAluminiumShell: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("big_aluminium_shell").register()
    val bigTitaniumShell: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("big_titanium_shell").register()
    val flatSteelCasing: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("flat_steel_casing").register()
    val smallSteelGridFins: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("small_steel_grid_fins").register()
    val bigSteelGridFins: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("big_steel_grid_fins").register()
    val largeSteelFins: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("large_steel_fins").register()
    val smallTitaniumFins: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("small_titanium_fins").register()
    val steelSphere: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("steel_sphere").register()
    val steelPedestal: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("steel_pedestal").register()
    val dysfunctionalNuclearReactor: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("dysfunctional_nuclear_reactor").register()
    val largeSteelRotor: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("large_steel_rotor").register()
    val generatorBody: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("generator_body").register()
    val titaniumBlade: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("titanium_blade").register()
    val tungstenReinforcedBlade: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("tungsten_reinforced_blade").register()
    val titaniumSteamTurbine: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("titanium_steam_turbine").register()
    val reinforcedTurbofanBlades: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("reinforced_turbofan_blades").register()
    val generatorFront: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("generator_front").register()
    val toothpicks: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("toothpicks").register()
    val ductTape: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("duct_tape").register()
    val clayCatalyst: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("clay_catalyst").register()
    val smallMissileAssembly: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("small_missile_assembly").register()
    val smallWarhead: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("small_warhead").register()
    val mediumWarhead: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("medium_warhead").register()
    val largeWarhead: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("large_warhead").register()
    val smallIncendiaryWarhead: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("small_incendiary_warhead").register()
    val mediumIncendiaryWarhead: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("medium_incendiary_warhead").register()
    val largeIncendiaryWarhead: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("large_incendiary_warhead").register()
    val smallClusterWarhead: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("small_cluster_warhead").register()
    val mediumClusterWarhead: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("medium_cluster_warhead").register()
    val largeClusterWarhead: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("large_cluster_warhead").register()
    val smallBunkerBusterWarhead: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("small_bunker_busting_warhead").register()
    val mediumBunkerBusterWarhead: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("medium_bunker_busting_warhead").register()
    val largeBunkerBusterWarhead: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("large_bunker_busting_warhead").register()
    val nuclearWarhead: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("nuclear_warhead").register()
    val thermonuclearWarhead: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("thermonuclear_warhead").register()
    val endothermicWarhead: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("endothermic_warhead").register()
    val exothermicWarhead: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("exothermic_warhead").register()
    val smallFuelTank: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("small_fuel_tank").register()
    val mediumFuelTank: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("medium_fuel_tank").register()
    val largeFuelTank: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("large_fuel_tank").register()
    val smallThruster: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("small_thruster").register()
    val mediumThruster: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("medium_thruster").register()
    val largeThruster: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("large_thruster").register()
    val lvnNuclearRocketEngine: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("lv_n_nuclear_rocket_engine").register()
    val satelliteBase: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("satellite_base").register()
    val highGainOpticalCamera: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("high_gain_optical_camera").register()
    val m700SurveyScanner: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("m700_survey_scanner").register()
    val radarDish: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("radar_dish").register()
    val deathRay: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("death_ray").register()
    val xeniumResonator: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("xenium_resonator").register()
    val size10Connector: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("size_10_connector").register()
    val size15Connector: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("size_15_connector").register()
    val size20Connector: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("size_20_connector").register()
    val hunterChopperCockpit: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("hunter_chopper_cockpit").register()
    val emplacementGun: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("emplacement_gun").register()
    val hunterChopperBody: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("hunter_chopper_body").register()
    val hunterChopperTail: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("hunter_chopper_tail").register()
    val hunterChopperWing: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("hunter_chopper_wing").register()
    val hunterChopperRotorBlades: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("hunter_chopper_rotor_blades").register()
    val combineScrapMetal: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("combine_scrap_metal").register()
    val heavyHammerHead: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("heavy_hammer_head").register()
    val heavyAxeHead: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("heavy_axe_head").register()
    val reinforcedPolymerHandle: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("reinforced_polymer_handle").register()
    val basicCircuitAssembly: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("basic_circuit_assembly").register()
    val basicCircuit: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("basic_circuit").register()
    val enhancedCircuit: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("enhanced_circuit").register()
    val advancedCircuit: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("advanced_circuit").register()
    val overclockedCircuit: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("overclocked_circuit").register()
    val highPerformanceCircuit: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).rarity(Rarity.RARE)).setRegistryName("high_performance_circuit").register()
    val militaryGradeCircuitBoardTier1: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("military_grade_circuit_board_tier_1").register()
    val militaryGradeCircuitBoardTier2: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("military_grade_circuit_board_tier_2").register()
    val militaryGradeCircuitBoardTier3: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("military_grade_circuit_board_tier_3").register()
    val militaryGradeCircuitBoardTier4: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("military_grade_circuit_board_tier_4").register()
    val militaryGradeCircuitBoardTier5: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("military_grade_circuit_board_tier_5").register()
    val militaryGradeCircuitBoardTier6: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("military_grade_circuit_board_tier_6").register()
    val revolverMechanism: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("revolver_mechanism").register()
    val advancedRevolverMechanism: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("advanced_revolver_mechanism").register()
    val rifleMechanism: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("rifle_mechanism").register()
    val advancedRifleMechanism: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("advanced_rifle_mechanism").register()
    val launcherMechanism: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("launcher_mechanism").register()
    val advancedLauncherMechanism: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("advanced_launcher_mechanism").register()
    val highTechWeaponMechanism: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("high_tech_weapon_mechanism").register()
    val point357MagnumPrimer: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("point_357_magnum_primer").register()
    val point44MagnumPrimer: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("point_44_magnum_primer").register()
    val smallCaliberPrimer: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("small_caliber_primer").register()
    val largeCaliberPrimer: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("large_caliber_primer").register()
    val buckshotPrimer: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("buckshot_primer").register()
    val point357MagnumCasing: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("point_357_magnum_casing").register()
    val point44MagnumCasing: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("point_44_magnum_casing").register()
    val smallCaliberCasing: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("small_caliber_casing").register()
    val largeCaliberCasing: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("large_caliber_casing").register()
    val buckshotCasing: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("buckshot_casing").register()
    val ironBulletAssembly: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("iron_bullet_assembly").register()
    val leadBulletAssembly: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("lead_bullet_assembly").register()
    val glassBulletAssembly: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("glass_bullet_assembly").register()
    val goldBulletAssembly: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("gold_bullet_assembly").register()
    val schrabidiumBulletAssembly: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("schrabidium_bullet_assembly").register()
    val nightmareBulletAssembly: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("nightmare_bullet_assembly").register()
    val deshBulletAssembly: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("desh_bullet_assembly").register()
    val point44MagnumAssembly: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("point_44_magnum_assembly").register()
    val nineMmAssembly: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("9_mm_assembly").register()
    val fivePoint56mmAssembly: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("5_point_56_mm_assembly").register()
    val point22LRAssembly: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("point_22_lr_assembly").register()
    val point5mmAssembly: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("point_5_mm_assembly").register()
    val point50AEAssembly: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("point_50_ae_assembly").register()
    val point50BMGAssembly: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("point_50_bmg_assembly").register()
    val silverBulletCasing: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("silver_bullet_casing").register()
    val twelvePoint8cmStarmetalHighEnergyShell: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("12_point_8_cm_starmetal_high_energy_shell").register()
    val twelvePoint8cmNuclearShell: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("12_point_8_cm_nuclear_shell").register()
    val twelvePoint8cmDUShell: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("12_point_8_cm_du_shell").register()
    val cableDrum: Item = AutoTooltippedItem(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("cable_drum").register()
    val paintingOfACartoonPony: Item = AutoTooltippedItem(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("painting_of_a_cartoon_pony").register()
    val conspiracyTheory: Item = AutoTooltippedItem(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("conspiracy_theory").register()
    val politicalTopic: Item = AutoTooltippedItem(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("political_topic").register()
    val ownOpinion: Item = AutoTooltippedItem(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("own_opinion").register()
    val explosivePellets: Item = AutoTooltippedItem(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("explosive_pellets").register()
    val leadPellets: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("lead_pellets").register()
    val flechettes: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("flechettes").register()
    val poisonGasCartridge: Item = AutoTooltippedItem(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("poison_gas_cartridge").register()
    val magnetron: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("magnetron").register()
    val denseCoalCluster: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("dense_coal_cluster").register()
    val machineUpgradeTemplate: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).stacksTo(1)).setRegistryName("machine_upgrade_template").register()
    val blankRune: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).stacksTo(1)).setRegistryName("blank_rune").register()
    val isaRune: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).stacksTo(1)).setRegistryName("isa_rune").register()
    val dagazRune: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).stacksTo(1)).setRegistryName("dagaz_rune").register()
    val hagalazRune: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).stacksTo(1)).setRegistryName("hagalaz_rune").register()
    val jeraRune: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).stacksTo(1)).setRegistryName("jera_rune").register()
    val thurisazRune: Item = Item(Item.Properties().tab(CT.Parts.itemGroup).stacksTo(1)).setRegistryName("thurisaz_rune").register()
    val burnedOutQuadSchrabidiumFuelRod: Item = AutoTooltippedItem(Item.Properties().tab(CT.Parts.itemGroup).stacksTo(1).rarity(Rarity.EPIC)).setRegistryName("burned_out_quad_schrabidium_rod").register()
    val scrap: Item = Item(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("scrap").register()
    val hotDepletedUraniumFuel: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive, EffectItem.EffectTypes.Hot), Item.Properties().tab(CT.Parts.itemGroup), 15f).setRegistryName("hot_depleted_uranium_fuel").register()
    val hotDepletedThoriumFuel: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive, EffectItem.EffectTypes.Hot), Item.Properties().tab(CT.Parts.itemGroup), 10f).setRegistryName("hot_depleted_thorium_fuel").register()
    val hotDepletedPlutoniumFuel: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive, EffectItem.EffectTypes.Hot), Item.Properties().tab(CT.Parts.itemGroup), 15f).setRegistryName("hot_depleted_plutonium_fuel").register()
    val hotDepletedMOXFuel: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive, EffectItem.EffectTypes.Hot), Item.Properties().tab(CT.Parts.itemGroup), 15f).setRegistryName("hot_depleted_mox_fuel").register()
    val hotDepletedSchrabidiumFuel: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive, EffectItem.EffectTypes.Blinding, EffectItem.EffectTypes.Hot), Item.Properties().tab(CT.Parts.itemGroup), 40f).setRegistryName("hot_depleted_schrabidium_fuel").register()
    val depletedUraniumFuel: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 15f).setRegistryName("depleted_uranium_fuel").register()
    val depletedThoriumFuel: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 10f).setRegistryName("depleted_thorium_fuel").register()
    val depletedPlutoniumFuel: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 15f).setRegistryName("depleted_plutonium_fuel").register()
    val depletedMOXFuel: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 15f).setRegistryName("depleted_mox_fuel").register()
    val depletedSchrabidiumFuel: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive, EffectItem.EffectTypes.Blinding), Item.Properties().tab(CT.Parts.itemGroup), 40f).setRegistryName("depleted_schrabidium_fuel").register()
    val trinitite: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 5f).setRegistryName("trinitite").register()
    val nuclearWaste: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 15f).setRegistryName("nuclear_waste").register()
    val tinyNuclearWaste: Item = EffectItem(listOf(EffectItem.EffectTypes.Radioactive), Item.Properties().tab(CT.Parts.itemGroup), 2f).setRegistryName("tiny_nuclear_waste").register()
    val crystalHorn: Item = AutoTooltippedItem(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("crystal_horn").register()
    val charredCrystal: Item = AutoTooltippedItem(Item.Properties().tab(CT.Parts.itemGroup)).setRegistryName("charred_crystal").register()

    // Siren Tracks
    val sirenTrackHatchSiren: Item = SirenTrack(SoundEvents.sirenTrackHatchSiren, 1f, true, "siren_track_hatch_siren", 0x334077).register()
    val sirenTrackAutopilotDisconnected: Item = SirenTrack(SoundEvents.sirenTrackAutopilotDisconnected, 1f, true, "siren_track_autopilot_disconnected", 0xB5B5B5).register()
    val sirenTrackAMSSiren: Item = SirenTrack(SoundEvents.sirenTrackAMSSiren, 1f, true, "siren_track_ams_siren", 0xE5BB52).register()
    val sirenTrackBlastDoorAlarm: Item = SirenTrack(SoundEvents.sirenTrackBlastDoorAlarm, 1f, true, "siren_track_blast_door_alarm", 0xB20000).register()
    val sirenTrackAPCSiren: Item = SirenTrack(SoundEvents.sirenTrackAPCSiren, 1f, true, "siren_track_apc_siren", 0x3666A0).register()
    val sirenTrackKlaxon: Item = SirenTrack(SoundEvents.sirenTrackKlaxon, 1f, true, "siren_track_klaxon", 0x808080).register()
    val sirenTrackVaultDoorAlarm: Item = SirenTrack(SoundEvents.sirenTrackVaultDoorAlarm, 1f, true, "siren_track_vault_door_alarm", 0x8C810B).register()
    val sirenTrackSecurityAlert: Item = SirenTrack(SoundEvents.sirenTrackSecurityAlert, 1f, true, "siren_track_security_alert", 0x76818E).register()
    val sirenTrackStandardSiren: Item = SirenTrack(SoundEvents.sirenTrackStandardSiren, 1f, true, "siren_track_standard_siren", 0x660000).register()
    val sirenTrackClassicSiren: Item = SirenTrack(SoundEvents.sirenTrackClassicSiren, 1f, true, "siren_track_classic_siren", 0xC0CFE8).register()
    val sirenTrackBankAlarm: Item = SirenTrack(SoundEvents.sirenTrackBankAlarm, 1f, true, "siren_track_bank_alarm", 0x3684E2).register()
    val sirenTrackBeepSiren: Item = SirenTrack(SoundEvents.sirenTrackBeepSiren, 1f, true, "siren_track_beep_siren", 0xD3D3D3).register()
    val sirenTrackContainerAlarm: Item = SirenTrack(SoundEvents.sirenTrackContainerAlarm, 1f, true, "siren_track_container_alarm", 0xE0BA9F).register()
    val sirenTrackSweepSiren: Item = SirenTrack(SoundEvents.sirenTrackSweepSiren, 1f, true, "siren_track_sweep_siren", 0xEDEA5A).register()
    val sirenTrackMissileSiloSiren: Item = SirenTrack(SoundEvents.sirenTrackMissileSiloSiren, 1f, true, "siren_track_missile_silo_siren", 0xABAB9A).register()
    val sirenTrackAirRaidSiren: Item = SirenTrack(SoundEvents.sirenTrackAirRaidSiren, 1f, false, "siren_track_air_raid_siren", 0xDF3795).register()
    val sirenTrackNostromoSelfDestruct: Item = SirenTrack(SoundEvents.sirenTrackNostromoSelfDestruct, 1f, true, "siren_track_nostromo_self_destruct", 0x5DD800).register()
    val sirenTrackEASAlarmScreech: Item = SirenTrack(SoundEvents.sirenTrackEASAlarmScreech, 1f, true, "siren_track_eas_alarm_screech", 0xB3A8C1).register()
    val sirenTrackAPCPass: Item = SirenTrack(SoundEvents.sirenTrackAPCPass, 1f, false, "siren_track_apc_pass", 0x3437D3).register()
    val sirenTrackRazortrainHorn: Item = SirenTrack(SoundEvents.sirenTrackRazortrainHorn, 1f, false, "siren_track_razortrain_horn", 0x7750ED).register()
}
